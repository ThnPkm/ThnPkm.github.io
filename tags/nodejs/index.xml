<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Nodejs - Tag - ThnPinkman’s blog</title>
        <link>https://thnpkm.github.io/tags/nodejs/</link>
        <description>Nodejs - Tag - ThnPinkman’s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 20 Aug 2024 23:51:36 &#43;0800</lastBuildDate><atom:link href="https://thnpkm.github.io/tags/nodejs/" rel="self" type="application/rss+xml" /><item>
    <title>nodejs</title>
    <link>https://thnpkm.github.io/posts/ctf/nodejs/</link>
    <pubDate>Tue, 20 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/nodejs/</guid>
    <description><![CDATA[前言：非常感谢F1veseven师傅的博客分享，本篇文章是在师傅分享的基础上，希望总结出一篇更全的姿式库供以后的比赛使用。
nnodejs语言的缺点 大小写特性 toUpperCase()toLowerCase()对于toUpperCase(): 字符`&#34;ı&#34;`、`&#34;ſ&#34;` 经过toUpperCase处理后结果为 `&#34;I&#34;`、`&#34;S&#34;`对于toLowerCase(): 字符`&#34;K&#34;`经过toLowerCase处理后结果为`&#34;k&#34;`(这个K不是K) 例题：ctfshow 334 打开题目是一个登录界面，阅读源码，这里贴出关键代码
module.exports = { items: [ {username: &#39;CTFSHOW&#39;, password: &#39;123456&#39;} ] }; var findUser = function(name, password){ return users.find(function(item){ return name!==&#39;CTFSHOW&#39; &amp;&amp; item.username === name.toUpperCase() &amp;&amp; item.password === password; }); }; 这题感觉题面有问题，考点没考到，输入小写的ctfshow和123456即可登录获得flag。
将题面改成这样又该如何绕过呢？
return name!==&#39;ctfshow&#39; &amp;&amp; item.username === name.toUpperCase() &amp;&amp; item.password === password; js中有大小写特性
这题刚好用到了类s字符，输入 ctfſhow/123456。成功登录
弱类型比较 大小比较
console.log(1==&#39;1&#39;); //true console.log(1&gt;&#39;2&#39;); //false console.log(&#39;1&#39;&lt;&#39;2&#39;); //true console.log(111&gt;&#39;3&#39;); //true console.log(&#39;111&#39;&gt;&#39;3&#39;); //false console.]]></description>
</item>
<item>
    <title>nodejsVM2沙箱逃逸</title>
    <link>https://thnpkm.github.io/posts/web%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/nodejsvm2%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</link>
    <pubDate>Tue, 20 Aug 2024 22:53:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/web%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/nodejsvm2%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</guid>
    <description><![CDATA[什么是沙箱以及VM？ 什么是沙箱：
沙箱就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了边界而不至于相互干扰而被装进集装箱的应用，也可以被方便地搬来搬去。
什么是VM：
VM就是虚拟环境，虚拟机，VM的特点就是不受环境的影响，也可以说他就是一个 沙箱环境 （沙箱模式给模块提供一个环境运行而不影响其它模块和它们私有的沙箱）类似于docker，docker是属于 Sandbox（沙箱） 的一种。
简而言之，vm提供了一个干净的独立环境，提供测试。
在Nodejs中，我们可以通过引入vm模块来创建一个“沙箱”，但其实这个vm模块的隔离功能并不完善，还有很多缺陷，因此Node后续升级了vm，也就是现在的vm2沙箱，vm2引用了vm模块的功能，并在其基础上做了一些优化。
vm模块 参考：https://xz.aliyun.com/t/11859#toc-1
nodejs作用域 用例子来解释很清晰
#1.js var height1 = 175 exports.height = height1 Node给我们提供了一个将js文件中元素输出的接口exports
#2.js const age = 20 const user = require(&#34;./1&#34;) console.log(age) console.log(user.height) 输出
20175 height的作用域是1.js,通过exports创建被require引入2.js
age的作用域是2.js
还有一个global作用域，就是全局变量。Nodejs下其他的所有属性和包都挂载在这个global对象下。在global下挂载了一些全局变量，我们在访问这些全局变量时不需要用global.xxx的方式来访问，直接用xxx就可以调用这个变量。举个例子，console就是挂载在global下的一个全局变量，我们在用console.log输出时并不需要写成global.console.log，其他常见全局变量还有process（一会逃逸要用到）。
我们可以自定义一个name的全局变量，
# 1.js var height1 = 175 global.name = &#34;ThnPkm&#34; exports.height = height1 全局变量则不需要exports创建
# 2.js const age = 20 const user = require(&#34;./1&#34;) console.log(age) console.log(user.height) console.log(name) 输出时也不需要user.name来引用，name直接是global变量
vm沙箱 前面提到了作用域这个概念，所以我们现在思考一下，如果想要实现沙箱的隔离作用，我们是不是可以创建一个新的作用域，让代码在这个新的作用域里面去运行，这样就和其他的作用域进行了隔离，这也就是vm模块运行的原理。]]></description>
</item>
<item>
    <title>nodejs原型链污染</title>
    <link>https://thnpkm.github.io/posts/web%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</link>
    <pubDate>Tue, 20 Aug 2024 22:53:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/web%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</guid>
    <description><![CDATA[原型链污染原理 网上很多文章,p神讲的很好
https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html例题（待补充） CTFshow 主要通过题目来进行更好的理解
web338 源码下来主要是这里
/* GET home page. */ router.post(&#39;/&#39;, require(&#39;body-parser&#39;).json(),function(req, res, next) { res.type(&#39;html&#39;); var flag=&#39;flag_here&#39;; var secert = {}; var sess = req.session; let user = {}; utils.copy(user,req.body); if(secert.ctfshow===&#39;36dboy&#39;){ res.end(flag); }else{ return res.json({ret_code: 2, ret_msg: &#39;登录失败&#39;+JSON.stringify(user)}); } }); 创建了一个secret对象和user对象
utils.copy(user,req.body);让我们可以传入post数据操作user，跟进到copy()方法
function copy(object1, object2){ for (let key in object2) { if (key in object2 &amp;&amp; key in object1) { copy(object1[key], object2[key]) } else { object1[key] = object2[key] } } } 可以发现其实就是merge方法的逻辑，只不过换了变量名]]></description>
</item>
</channel>
</rss>
